const { TwitterClient } = require("../../clients/twitter");
const readline = require("readline");
require("dotenv").config();

const mockAgent = {
	getId: () => "TestAgent",
	generateResponse: async (prompt) => {
		return "This is a test tweet generated by the test agent. #testing";
	},
};

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
});

const question = (query) =>
	new Promise((resolve) => rl.question(query, resolve));

async function testTwitterClient() {
	// console.log(process.env);
	try {
		console.log("\nTwitter Client Test\n==================\n");

		// Get credentials if not in env
		const username =
			process.env.TWITTER_USERNAME || (await question("Twitter Username: "));
		const password =
			process.env.TWITTER_PASSWORD || (await question("Twitter Password: "));
		const email =
			process.env.TWITTER_EMAIL || (await question("Twitter Email: "));
		// const twoFactorSecret = process.env.TWITTER_2FA_SECRET || await question("2FA Secret (optional, press enter to skip): ");

		const config = {
			username,
			password,
			email,
			// twoFactorSecret: twoFactorSecret || undefined,
			retryLimit: 3,
			postIntervalHours: 4,
			enableActions: false,
		};

		const twitter = new TwitterClient(mockAgent, config);

		try {
			await twitter.start();
			console.log("\nLogin successful!");

			while (true) {
				console.log("\nAvailable commands:");
				console.log("1. View timeline");
				console.log("2. Post test tweet");
				console.log("3. Check mentions");
				console.log("4. Like a tweet");
				console.log("5. Reply to a tweet");
				console.log("6. Exit");

				const choice = await question("\nEnter command number: ");

				switch (choice) {
					case "1":
						const tweets = await twitter.getTimeline(5);
						console.log("\nRecent tweets:");
						tweets.forEach((t) =>
							console.log(`\n${t.id} \n@${t.username}: ${t.text}`)
						);
						break;

					case "2":
						console.log("\nPosting test tweet...");
						await twitter.generateAndPost();
						break;

					case "3":
						console.log("\nChecking mentions...");
						const mentions = await twitter.getMentions(5);
						mentions.forEach((m) =>
							console.log(`\n${t.id} \n@${m.username}: ${m.text}`)
						);
						break;

					case "4":
						const likeId = await question("\nEnter tweet ID to like: ");
						const liked = await twitter.like(likeId);
						console.log(liked ? "Tweet liked!" : "Failed to like tweet");
						break;

					case "5":
						const tweetId = await question("\nEnter tweet ID to reply to: ");
						const replyText = await question(
							"Enter reply text (or press enter for auto-generated): "
						);
						await twitter.replyToTweet(tweetId, replyText || undefined);
						break;

					case "6":
						console.log("\nStopping Twitter client...");
						await twitter.stop();
						rl.close();
						return;

					default:
						console.log("\nInvalid command");
				}
			}
		} catch (error) {
			console.error("\nError during operation:", error);
		}
	} catch (error) {
		console.error("\nFatal error:", error);
	} finally {
		rl.close();
	}
}

if (require.main === module) {
	testTwitterClient().catch(console.error);
}

module.exports = { testTwitterClient };
